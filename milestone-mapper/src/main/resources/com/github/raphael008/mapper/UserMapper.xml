<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.github.raphael008.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.github.raphael008.model.User">
    <id column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
    <result column="user_nickname" jdbcType="VARCHAR" property="userNickname" />
    <result column="user_email" jdbcType="VARCHAR" property="userEmail" />
    <result column="user_age" jdbcType="INTEGER" property="userAge" />
    <result column="user_avatar" jdbcType="VARCHAR" property="userAvatar" />
    <result column="user_gender" jdbcType="INTEGER" property="userGender" />
    <result column="user_salt" jdbcType="VARCHAR" property="userSalt" />
    <result column="creator_id" jdbcType="BIGINT" property="creatorId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="blocked" jdbcType="INTEGER" property="blocked" />
    <result column="deleted" jdbcType="INTEGER" property="deleted" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    user_id, user_name, user_nickname, user_email, user_age, user_avatar, user_gender, 
    user_salt, creator_id, create_time, blocked, deleted
  </sql>
  <select id="selectByExample" parameterType="com.github.raphael008.model.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bd_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from bd_user
    where user_id = #{userId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from bd_user
    where user_id = #{userId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.github.raphael008.model.UserExample">
    delete from bd_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" keyColumn="user_id" keyProperty="userId" parameterType="com.github.raphael008.model.User" useGeneratedKeys="true">
    insert into bd_user (user_id, user_name, user_nickname, 
      user_email, user_age, user_avatar, 
      user_gender, user_salt, creator_id, 
      create_time, blocked, deleted
      )
    values (#{userId,jdbcType=BIGINT}, #{userName,jdbcType=VARCHAR}, #{userNickname,jdbcType=VARCHAR}, 
      #{userEmail,jdbcType=VARCHAR}, #{userAge,jdbcType=INTEGER}, #{userAvatar,jdbcType=VARCHAR}, 
      #{userGender,jdbcType=INTEGER}, #{userSalt,jdbcType=VARCHAR}, #{creatorId,jdbcType=BIGINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{blocked,jdbcType=INTEGER}, #{deleted,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" keyColumn="user_id" keyProperty="userId" parameterType="com.github.raphael008.model.User" useGeneratedKeys="true">
    insert into bd_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="userNickname != null">
        user_nickname,
      </if>
      <if test="userEmail != null">
        user_email,
      </if>
      <if test="userAge != null">
        user_age,
      </if>
      <if test="userAvatar != null">
        user_avatar,
      </if>
      <if test="userGender != null">
        user_gender,
      </if>
      <if test="userSalt != null">
        user_salt,
      </if>
      <if test="creatorId != null">
        creator_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="blocked != null">
        blocked,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userNickname != null">
        #{userNickname,jdbcType=VARCHAR},
      </if>
      <if test="userEmail != null">
        #{userEmail,jdbcType=VARCHAR},
      </if>
      <if test="userAge != null">
        #{userAge,jdbcType=INTEGER},
      </if>
      <if test="userAvatar != null">
        #{userAvatar,jdbcType=VARCHAR},
      </if>
      <if test="userGender != null">
        #{userGender,jdbcType=INTEGER},
      </if>
      <if test="userSalt != null">
        #{userSalt,jdbcType=VARCHAR},
      </if>
      <if test="creatorId != null">
        #{creatorId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="blocked != null">
        #{blocked,jdbcType=INTEGER},
      </if>
      <if test="deleted != null">
        #{deleted,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.github.raphael008.model.UserExample" resultType="java.lang.Long">
    select count(*) from bd_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="findByUsername" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/>
    from bd_user
    where user_name = #{username}
    and deleted = 0
    order by create_time desc limit 1
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update bd_user
    <set>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.userName != null">
        user_name = #{record.userName,jdbcType=VARCHAR},
      </if>
      <if test="record.userNickname != null">
        user_nickname = #{record.userNickname,jdbcType=VARCHAR},
      </if>
      <if test="record.userEmail != null">
        user_email = #{record.userEmail,jdbcType=VARCHAR},
      </if>
      <if test="record.userAge != null">
        user_age = #{record.userAge,jdbcType=INTEGER},
      </if>
      <if test="record.userAvatar != null">
        user_avatar = #{record.userAvatar,jdbcType=VARCHAR},
      </if>
      <if test="record.userGender != null">
        user_gender = #{record.userGender,jdbcType=INTEGER},
      </if>
      <if test="record.userSalt != null">
        user_salt = #{record.userSalt,jdbcType=VARCHAR},
      </if>
      <if test="record.creatorId != null">
        creator_id = #{record.creatorId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.blocked != null">
        blocked = #{record.blocked,jdbcType=INTEGER},
      </if>
      <if test="record.deleted != null">
        deleted = #{record.deleted,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update bd_user
    set user_id = #{record.userId,jdbcType=BIGINT},
      user_name = #{record.userName,jdbcType=VARCHAR},
      user_nickname = #{record.userNickname,jdbcType=VARCHAR},
      user_email = #{record.userEmail,jdbcType=VARCHAR},
      user_age = #{record.userAge,jdbcType=INTEGER},
      user_avatar = #{record.userAvatar,jdbcType=VARCHAR},
      user_gender = #{record.userGender,jdbcType=INTEGER},
      user_salt = #{record.userSalt,jdbcType=VARCHAR},
      creator_id = #{record.creatorId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      blocked = #{record.blocked,jdbcType=INTEGER},
      deleted = #{record.deleted,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.github.raphael008.model.User">
    update bd_user
    <set>
      <if test="userName != null">
        user_name = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="userNickname != null">
        user_nickname = #{userNickname,jdbcType=VARCHAR},
      </if>
      <if test="userEmail != null">
        user_email = #{userEmail,jdbcType=VARCHAR},
      </if>
      <if test="userAge != null">
        user_age = #{userAge,jdbcType=INTEGER},
      </if>
      <if test="userAvatar != null">
        user_avatar = #{userAvatar,jdbcType=VARCHAR},
      </if>
      <if test="userGender != null">
        user_gender = #{userGender,jdbcType=INTEGER},
      </if>
      <if test="userSalt != null">
        user_salt = #{userSalt,jdbcType=VARCHAR},
      </if>
      <if test="creatorId != null">
        creator_id = #{creatorId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="blocked != null">
        blocked = #{blocked,jdbcType=INTEGER},
      </if>
      <if test="deleted != null">
        deleted = #{deleted,jdbcType=INTEGER},
      </if>
    </set>
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.github.raphael008.model.User">
    update bd_user
    set user_name = #{userName,jdbcType=VARCHAR},
      user_nickname = #{userNickname,jdbcType=VARCHAR},
      user_email = #{userEmail,jdbcType=VARCHAR},
      user_age = #{userAge,jdbcType=INTEGER},
      user_avatar = #{userAvatar,jdbcType=VARCHAR},
      user_gender = #{userGender,jdbcType=INTEGER},
      user_salt = #{userSalt,jdbcType=VARCHAR},
      creator_id = #{creatorId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      blocked = #{blocked,jdbcType=INTEGER},
      deleted = #{deleted,jdbcType=INTEGER}
    where user_id = #{userId,jdbcType=BIGINT}
  </update>
  <insert id="insertRange" keyColumn="user_id" keyProperty="userId" parameterType="com.github.raphael008.model.User" useGeneratedKeys="true">
    insert into bd_user (user_id, user_name, user_nickname, user_email, user_age, user_avatar, user_gender, user_salt, creator_id, create_time, blocked, deleted) values
    <foreach collection="list" index="index" item="item" separator=",">
      (#{item.userId, jdbcType=BIGINT}, #{item.userName, jdbcType=VARCHAR}, #{item.userNickname, jdbcType=VARCHAR}, #{item.userEmail, jdbcType=VARCHAR}, #{item.userAge, jdbcType=INTEGER}, #{item.userAvatar, jdbcType=VARCHAR}, #{item.userGender, jdbcType=INTEGER}, #{item.userSalt, jdbcType=VARCHAR}, #{item.creatorId, jdbcType=BIGINT}, #{item.createTime, jdbcType=TIMESTAMP}, #{item.blocked, jdbcType=INTEGER}, #{item.deleted, jdbcType=INTEGER})
    </foreach>
  </insert>
  <insert id="insertRangeSelective" keyColumn="user_id" keyProperty="userId" parameterType="com.github.raphael008.model.User" useGeneratedKeys="true">
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        user_id,
      </if>
      <if test="userName != null">
        user_name,
      </if>
      <if test="userNickname != null">
        user_nickname,
      </if>
      <if test="userEmail != null">
        user_email,
      </if>
      <if test="userAge != null">
        user_age,
      </if>
      <if test="userAvatar != null">
        user_avatar,
      </if>
      <if test="userGender != null">
        user_gender,
      </if>
      <if test="userSalt != null">
        user_salt,
      </if>
      <if test="creatorId != null">
        creator_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="blocked != null">
        blocked,
      </if>
      <if test="deleted != null">
        deleted,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId, jdbcType=BIGINT},
      </if>
      <if test="userName != null">
        #{userName, jdbcType=VARCHAR},
      </if>
      <if test="userNickname != null">
        #{userNickname, jdbcType=VARCHAR},
      </if>
      <if test="userEmail != null">
        #{userEmail, jdbcType=VARCHAR},
      </if>
      <if test="userAge != null">
        #{userAge, jdbcType=INTEGER},
      </if>
      <if test="userAvatar != null">
        #{userAvatar, jdbcType=VARCHAR},
      </if>
      <if test="userGender != null">
        #{userGender, jdbcType=INTEGER},
      </if>
      <if test="userSalt != null">
        #{userSalt, jdbcType=VARCHAR},
      </if>
      <if test="creatorId != null">
        #{creatorId, jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime, jdbcType=TIMESTAMP},
      </if>
      <if test="blocked != null">
        #{blocked, jdbcType=INTEGER},
      </if>
      <if test="deleted != null">
        #{deleted, jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateRangeByPrimaryKey" parameterType="com.github.raphael008.model.User">
    update bd_user set user_name = #{userName, jdbcType=VARCHAR}, user_nickname = #{userNickname, jdbcType=VARCHAR}, user_email = #{userEmail, jdbcType=VARCHAR}, user_age = #{userAge, jdbcType=INTEGER}, user_avatar = #{userAvatar, jdbcType=VARCHAR}, user_gender = #{userGender, jdbcType=INTEGER}, user_salt = #{userSalt, jdbcType=VARCHAR}, creator_id = #{creatorId, jdbcType=BIGINT}, create_time = #{createTime, jdbcType=TIMESTAMP}, blocked = #{blocked, jdbcType=INTEGER}, deleted = #{deleted, jdbcType=INTEGER} where user_id = #{userId, jdbcType=BIGINT}
  </update>
  <update id="updateRangeByPrimaryKeySelective" parameterType="com.github.raphael008.model.User">
    update bd_user
    <set>
      <if test="userName != null">
        user_name = #{userName, jdbcType=VARCHAR},
      </if>
      <if test="userNickname != null">
        user_nickname = #{userNickname, jdbcType=VARCHAR},
      </if>
      <if test="userEmail != null">
        user_email = #{userEmail, jdbcType=VARCHAR},
      </if>
      <if test="userAge != null">
        user_age = #{userAge, jdbcType=INTEGER},
      </if>
      <if test="userAvatar != null">
        user_avatar = #{userAvatar, jdbcType=VARCHAR},
      </if>
      <if test="userGender != null">
        user_gender = #{userGender, jdbcType=INTEGER},
      </if>
      <if test="userSalt != null">
        user_salt = #{userSalt, jdbcType=VARCHAR},
      </if>
      <if test="creatorId != null">
        creator_id = #{creatorId, jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime, jdbcType=TIMESTAMP},
      </if>
      <if test="blocked != null">
        blocked = #{blocked, jdbcType=INTEGER},
      </if>
      <if test="deleted != null">
        deleted = #{deleted, jdbcType=INTEGER},
      </if>
    </set>
    where user_id = #{userId, jdbcType=BIGINT}
  </update>
</mapper>